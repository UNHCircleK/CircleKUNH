{"version":3,"sources":["Pages/SiteImages/lobster.jpg","Pages/Components/Pagebox.js","Pages/Home.js","Pages/AboutPage.js","Pages/PayingDues.js","Pages/Scrapbook.js","Pages/ServiceCalendar.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","PageBox","className","this","props","children","React","Component","Home","src","Lobster","AboutPage","PayingDues","Scrapbook","ServiceCalendar","App","state","page","onClick","e","setState","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iGAAAA,EAAOC,QAAU,IAA0B,qC,oNCS5BC,E,iLAJP,OAAO,yBAAKC,UAAU,WAAWC,KAAKC,MAAMC,c,GAF9BC,IAAMC,WCUbC,E,iLAPP,OAAO,kBAAC,EAAD,KACH,yBAAKC,IAAKC,IAASR,UAAU,gBAC7B,kBAAC,EAAD,+C,GAJOI,IAAMC,WCKVI,E,iLAJP,OAAO,kBAAC,EAAD,uB,GAFSL,IAAMC,WCMfK,E,iLAJP,OAAO,kBAAC,EAAD,iC,GAFUN,IAAMC,WCMhBM,E,iLAJP,OAAO,kBAAC,EAAD,sB,GAFSP,IAAMC,WCMfO,E,iLAJP,OAAO,kBAAC,EAAD,6B,GAFeR,IAAMC,WCiCrBQ,E,2MAxBbC,MAAQ,CACNC,KAAM,kBAAC,EAAD,O,wEAIE,IAAD,OACP,OACE,yBAAKf,UAAU,OACb,yBAAKA,UAAU,iBACb,4BAAQA,UAAU,eAAegB,QAAU,SAAAC,GAAK,EAAKC,SAAS,CAACH,KAAM,kBAAC,EAAD,UAArE,QACA,4BAAQf,UAAU,eAAegB,QAAU,SAAAC,GAAK,EAAKC,SAAS,CAACH,KAAM,kBAAC,EAAD,UAArE,cACA,4BAAQf,UAAU,eAAegB,QAAU,SAAAC,GAAK,EAAKC,SAAS,CAACH,KAAM,kBAAC,EAAD,UAArE,eACA,4BAAQf,UAAU,eAAegB,QAAU,SAAAC,GAAK,EAAKC,SAAS,CAACH,KAAM,kBAAC,EAAD,UAArE,aACA,4BAAQf,UAAU,eAAegB,QAAU,SAAAC,GAAK,EAAKC,SAAS,CAACH,KAAM,kBAAC,EAAD,UAArE,qBAEF,4BAAQf,UAAU,cACfC,KAAKa,MAAMC,W,GAlBJX,IAAMC,WCEJc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.8d383155.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/lobster.ca5cd201.jpg\";","import React from 'react';\n\n\nclass PageBox extends React.Component {\n    render() {\n        return <div className=\"PageBox\">{this.props.children}</div>\n    }\n}\n\nexport default PageBox;","import React from 'react';\nimport Lobster from './SiteImages/lobster.jpg'\nimport PageBox from './Components/Pagebox';\n\nclass Home extends React.Component {\n    render() {\n        return <PageBox>\n            <img src={Lobster} className=\"SplashImage\"></img>\n            <PageBox>This is an awesome Home Page!!!!!</PageBox>\n        </PageBox>\n    }\n}\n\nexport default Home;","import React from 'react';\nimport PageBox from './Components/Pagebox';\n\nclass AboutPage extends React.Component {\n    render() {\n        return <PageBox>About Page</PageBox>\n    }\n}\n\nexport default AboutPage;","import React from 'react';\nimport PageBox from './Components/Pagebox';\n\nclass PayingDues extends React.Component {\n    render() {\n        return <PageBox>Dues Can Be Paid at:</PageBox>\n    }\n}\n\nexport default PayingDues;","import React from 'react';\nimport PageBox from './Components/Pagebox';\n\nclass Scrapbook extends React.Component {\n    render() {\n        return <PageBox>Scrapbook</PageBox>\n    }\n}\n\nexport default Scrapbook;","import React from 'react';\nimport PageBox from './Components/Pagebox';\n\nclass ServiceCalendar extends React.Component {\n    render() {\n        return <PageBox>Service Calendar</PageBox>\n    }\n}\n\nexport default ServiceCalendar;","import React from 'react';\nimport './App.css';\n\n\nimport Home from './Pages/Home';\nimport AboutPage from './Pages/AboutPage';\nimport PayingDues from './Pages/PayingDues';\nimport Scrapbook from './Pages/Scrapbook';\nimport ServiceCalendar from './Pages/ServiceCalendar';\n\nclass App extends React.Component {\n\n  state = {\n    page: <Home/>\n  }\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"HeaderButtons\">\n          <button className=\"HeaderButton\" onClick= {e=> {this.setState({page: <Home/>})}}>Home</button>\n          <button className=\"HeaderButton\" onClick= {e=> {this.setState({page: <AboutPage/>})}}>About Page</button>\n          <button className=\"HeaderButton\" onClick= {e=> {this.setState({page: <PayingDues/>})}}>Paying Dues</button>\n          <button className=\"HeaderButton\" onClick= {e=> {this.setState({page: <Scrapbook/>})}}>Scrapbook</button>\n          <button className=\"HeaderButton\" onClick= {e=> {this.setState({page: <ServiceCalendar/>})}}>Service Calendar</button>\n        </div>\n        <header className=\"App-header\">\n          {this.state.page}\n        </header>\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}